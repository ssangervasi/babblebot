var exports = exports || {};
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateScore = exports.parseCsv = void 0;
exports.parseCsv = (raw) => {
    const lines = raw.split(/\n+/);
    const cleanLines = lines
        .map(line => line.trim())
        .filter(line => line.length > 0)
        .filter(line => !line.startsWith('Card'));
    const rows = [];
    cleanLines.forEach(line => {
        const splitted = line.split(',');
        if (splitted.length !== 3) {
            throw new Error(`Invalid score row: "${line}"`);
        }
        const [cardTag, scoreTag, scoreStr] = splitted;
        if (cardTag === '') {
            return;
        }
        const score = Number(scoreStr) || 0;
        rows.push({ cardTag, scoreTag, score });
    });
    return rows;
};
exports.calculateScore = (cardTagsStr, characterTagsStr, nodeTagsStr, scoreTable) => {
    const cardTags = spaceSplit(cardTagsStr);
    console.log(cardTags);
    const characterTags = spaceSplit(characterTagsStr);
    const nodeTags = spaceSplit(nodeTagsStr);
    const effectTags = [...characterTags, ...nodeTags];
    // Build the default map for all card tags
    const cardTagToEffectTag = new Map(cardTags.map(cardTag => [cardTag, '']));
    effectTags.forEach(effectTag => {
        const effectTagPrefix = effectTag.split('_')[0];
        if (!effectTagPrefix) {
            console.warn(`ignoring tag "${effectTag}" because it has no prefix`);
            return;
        }
        if (cardTagToEffectTag.has(effectTagPrefix)) {
            cardTagToEffectTag.set(effectTagPrefix, effectTag);
        }
    });
    let scoreSum = 0;
    scoreTable.forEach(({ cardTag, scoreTag, score }) => {
        if (!cardTagToEffectTag.has(cardTag)) {
            return;
        }
        if (cardTagToEffectTag.get(cardTag) === scoreTag) {
            scoreSum += score;
        }
    });
    return scoreSum;
};
const spaceSplit = (str) => str.split(/\s+/);
global.Babblebot = global.Babblebot || {};
global.Babblebot.cardScores = global.Babblebot.cardScores || exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZFNjb3Jlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jYXJkU2NvcmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU9hLFFBQUEsUUFBUSxHQUFHLENBQUMsR0FBVyxFQUFjLEVBQUU7SUFDbkQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM5QixNQUFNLFVBQVUsR0FBRyxLQUFLO1NBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUUxQyxNQUFNLElBQUksR0FBZSxFQUFFLENBQUE7SUFFM0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN6QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsSUFBSSxHQUFHLENBQUMsQ0FBQTtTQUMvQztRQUNELE1BQU0sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQTtRQUM5QyxJQUFJLE9BQU8sS0FBSyxFQUFFLEVBQUU7WUFDbkIsT0FBTTtTQUNOO1FBQ0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQ3hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDLENBQUE7QUFFWSxRQUFBLGNBQWMsR0FBRyxDQUM3QixXQUFtQixFQUNuQixnQkFBd0IsRUFDeEIsV0FBbUIsRUFDbkIsVUFBc0IsRUFDYixFQUFFO0lBQ1gsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFckIsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDbEQsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ3hDLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBRyxhQUFhLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQTtJQUVsRCwwQ0FBMEM7SUFDMUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FDakMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQ3RDLENBQUE7SUFDRCxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzlCLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDL0MsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNyQixPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixTQUFTLDRCQUE0QixDQUFDLENBQUE7WUFDcEUsT0FBTTtTQUNOO1FBQ0QsSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDNUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxTQUFTLENBQUMsQ0FBQTtTQUNsRDtJQUNGLENBQUMsQ0FBQyxDQUFBO0lBQ0YsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBQ2hCLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNuRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JDLE9BQU07U0FDTjtRQUNELElBQUksa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUNqRCxRQUFRLElBQUksS0FBSyxDQUFBO1NBQ2pCO0lBQ0YsQ0FBQyxDQUFDLENBQUE7SUFDRixPQUFPLFFBQVEsQ0FBQTtBQUNoQixDQUFDLENBQUE7QUFFRCxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQVcsRUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQVE5RCxNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFBO0FBQzdDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgU2NvcmVUYWJsZSA9IFNjb3JlUm93W11cbmludGVyZmFjZSBTY29yZVJvdyB7XG5cdGNhcmRUYWc6IHN0cmluZ1xuXHRzY29yZVRhZzogc3RyaW5nXG5cdHNjb3JlOiBudW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlQ3N2ID0gKHJhdzogc3RyaW5nKTogU2NvcmVUYWJsZSA9PiB7XG5cdGNvbnN0IGxpbmVzID0gcmF3LnNwbGl0KC9cXG4rLylcblx0Y29uc3QgY2xlYW5MaW5lcyA9IGxpbmVzXG5cdFx0Lm1hcChsaW5lID0+IGxpbmUudHJpbSgpKVxuXHRcdC5maWx0ZXIobGluZSA9PiBsaW5lLmxlbmd0aCA+IDApXG5cdFx0LmZpbHRlcihsaW5lID0+ICFsaW5lLnN0YXJ0c1dpdGgoJ0NhcmQnKSlcblxuXHRjb25zdCByb3dzOiBTY29yZVJvd1tdID0gW11cblxuXHRjbGVhbkxpbmVzLmZvckVhY2gobGluZSA9PiB7XG5cdFx0Y29uc3Qgc3BsaXR0ZWQgPSBsaW5lLnNwbGl0KCcsJylcblx0XHRpZiAoc3BsaXR0ZWQubGVuZ3RoICE9PSAzKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2NvcmUgcm93OiBcIiR7bGluZX1cImApXG5cdFx0fVxuXHRcdGNvbnN0IFtjYXJkVGFnLCBzY29yZVRhZywgc2NvcmVTdHJdID0gc3BsaXR0ZWRcblx0XHRpZiAoY2FyZFRhZyA9PT0gJycpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblx0XHRjb25zdCBzY29yZSA9IE51bWJlcihzY29yZVN0cikgfHwgMFxuXHRcdHJvd3MucHVzaCh7IGNhcmRUYWcsIHNjb3JlVGFnLCBzY29yZSB9KVxuXHR9KVxuXG5cdHJldHVybiByb3dzXG59XG5cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVTY29yZSA9IChcblx0Y2FyZFRhZ3NTdHI6IHN0cmluZyxcblx0Y2hhcmFjdGVyVGFnc1N0cjogc3RyaW5nLFxuXHRub2RlVGFnc1N0cjogc3RyaW5nLFxuXHRzY29yZVRhYmxlOiBTY29yZVRhYmxlLFxuKTogbnVtYmVyID0+IHtcblx0Y29uc3QgY2FyZFRhZ3MgPSBzcGFjZVNwbGl0KGNhcmRUYWdzU3RyKVxuXHRjb25zb2xlLmxvZyhjYXJkVGFncylcblxuXHRjb25zdCBjaGFyYWN0ZXJUYWdzID0gc3BhY2VTcGxpdChjaGFyYWN0ZXJUYWdzU3RyKVxuXHRjb25zdCBub2RlVGFncyA9IHNwYWNlU3BsaXQobm9kZVRhZ3NTdHIpXG5cdGNvbnN0IGVmZmVjdFRhZ3MgPSBbLi4uY2hhcmFjdGVyVGFncywgLi4ubm9kZVRhZ3NdXG5cblx0Ly8gQnVpbGQgdGhlIGRlZmF1bHQgbWFwIGZvciBhbGwgY2FyZCB0YWdzXG5cdGNvbnN0IGNhcmRUYWdUb0VmZmVjdFRhZyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KFxuXHRcdGNhcmRUYWdzLm1hcChjYXJkVGFnID0+IFtjYXJkVGFnLCAnJ10pLFxuXHQpXG5cdGVmZmVjdFRhZ3MuZm9yRWFjaChlZmZlY3RUYWcgPT4ge1xuXHRcdGNvbnN0IGVmZmVjdFRhZ1ByZWZpeCA9IGVmZmVjdFRhZy5zcGxpdCgnXycpWzBdXG5cdFx0aWYgKCFlZmZlY3RUYWdQcmVmaXgpIHtcblx0XHRcdGNvbnNvbGUud2FybihgaWdub3JpbmcgdGFnIFwiJHtlZmZlY3RUYWd9XCIgYmVjYXVzZSBpdCBoYXMgbm8gcHJlZml4YClcblx0XHRcdHJldHVyblxuXHRcdH1cblx0XHRpZiAoY2FyZFRhZ1RvRWZmZWN0VGFnLmhhcyhlZmZlY3RUYWdQcmVmaXgpKSB7XG5cdFx0XHRjYXJkVGFnVG9FZmZlY3RUYWcuc2V0KGVmZmVjdFRhZ1ByZWZpeCwgZWZmZWN0VGFnKVxuXHRcdH1cblx0fSlcblx0bGV0IHNjb3JlU3VtID0gMFxuXHRzY29yZVRhYmxlLmZvckVhY2goKHsgY2FyZFRhZywgc2NvcmVUYWcsIHNjb3JlIH0pID0+IHtcblx0XHRpZiAoIWNhcmRUYWdUb0VmZmVjdFRhZy5oYXMoY2FyZFRhZykpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblx0XHRpZiAoY2FyZFRhZ1RvRWZmZWN0VGFnLmdldChjYXJkVGFnKSA9PT0gc2NvcmVUYWcpIHtcblx0XHRcdHNjb3JlU3VtICs9IHNjb3JlXG5cdFx0fVxuXHR9KVxuXHRyZXR1cm4gc2NvcmVTdW1cbn1cblxuY29uc3Qgc3BhY2VTcGxpdCA9IChzdHI6IHN0cmluZyk6IHN0cmluZ1tdID0+IHN0ci5zcGxpdCgvXFxzKy8pXG5cbmRlY2xhcmUgdmFyIGdsb2JhbDoge1xuXHRleHBvcnRzOiB7fVxuXHRzc2FuZ2VydmFzaT86IHtcblx0XHRjYXJkU2NvcmVzPzoge31cblx0fVxufVxuZ2xvYmFsLnNzYW5nZXJ2YXNpID0gZ2xvYmFsLnNzYW5nZXJ2YXNpIHx8IHt9XG5nbG9iYWwuc3NhbmdlcnZhc2kuY2FyZFNjb3JlcyA9IGdsb2JhbC5zc2FuZ2VydmFzaS5jYXJkU2NvcmVzIHx8IGV4cG9ydHNcbiJdfQ==